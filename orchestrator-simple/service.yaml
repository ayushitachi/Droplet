apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name
  labels:
    app: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      labels:
        app: service_name
    spec:
      volumes:
        - name: workspace-volume
          emptyDir: {}
      # initContainers:
      #   - name: copy-s3-resources
      #     image: amazon/aws-cli
      #     command: ["/bin/sh", "-c"]
      #     env:
      #       - name: AWS_ACCESS_KEY_ID
      #         value: "5076f5ee88056996322791b9c2ae7f09"
      #       - name: AWS_SECRET_ACCESS_KEY
      #         value: "e876ce7b41849db6cdeb7237474b799b8e68703d9cbe95d248c56837f81a44dd"
      #       - name: S3_ENDPOINT
      #         value: "https://f08ad61fbd695b47bfe7c17487051364.r2.cloudflarestorage.com"
      #       - name: AWS_SIGNATURE_VERSION
      #         value: "s3v4"
      #     args:
      #       - >
      #         aws s3 cp s3://droplet/code/service_name/ /workspace/ --recursive &&
      #         echo "Resources copied from S3";
      #     volumeMounts:
      #       - name: workspace-volume
      #         mountPath: /workspace
      containers:
        - name: runner
          image: ayushitachi/runner-droplet:latest
          ports:
            - containerPort: 3001
            - containerPort: 3000
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            requests:
              cpu: "0.5"
              memory: "500Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
            envFrom:
              - secretRef:
                  name: env

---
apiVersion: v1
kind: Service
metadata:
  name: service_name
spec:
  selector:
    app: service_name
  ports:
    - protocol: TCP
      name: ws
      port: 3001
      targetPort: 3001
    - protocol: TCP
      name: user
      port: 3000
      targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service_name
  annotations:
    kubernetes.io/ingress.class: nginx # or your specific ingress class
    nginx.ingress.kubernetes.io/ssl-redirect: "true" # forces HTTPS
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - service_name.kubertestingayush.xyz
        - service_name.prac.kubertestingayush.xyz
      secretName: my-tls-secret
  rules:
    - host: service_name.kubertestingayush.xyz
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 3001
    - host: service_name.prac.kubertestingayush.xyz
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service_name
                port:
                  number: 3000
